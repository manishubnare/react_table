{"version":3,"sources":["logo.svg","Components/BtnCellRenderer.jsx","Components/DropDown.js","Components/genderCellRenderer.jsx","Components/TableColumn.jsx","App.js","reportWebVitals.js","index.js"],"names":["BtnCellRenderer","props","buttonClick","e","setState","visible","deletedRow","node","data","gridApi","updateRowData","remove","btnClickedHandler","bind","this","value","style","color","onClick","Component","DropDown","GenderCellRenderer","TabelColumn","useState","gridRef","useRef","setGridApi","setGridColumnApi","GridApi","setGridApiOne","setGridColumnApiOne","newrowData","newData","id","name","email","gender","dob","country","city","onCellValueChanged","params","column","getId","selectedCountry","selectedCity","countyToCityMap","indexOf","setDataValue","textAlign","marginTop","className","marginLeft","marginRight","addIndex","newItems","createNewRowData","applyTransaction","add","addItems","selectedData","getSelectedRows","onRemoveSelected","rowData","forEachNode","find","x","push","onRemoveUnselected","type","currrowData","alert","onSubmit","height","width","defaultColDef","flex","minWidth","editable","frameworkComponents","btnCellRenderer","tableDatePicker","moment","setInputDate","onChange","format","genderCellRenderer","singleClickEdit","ref","rowSelection","animateRows","onGridReady","api","columnApi","field","pinned","resizable","checkboxSelection","sortable","filter","cellRenderer","cellEditor","cellEditorParams","values","cellHeight","formatValue","selectedRow","delete","param","match","Ireland","USA","India","App","TableColumn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54f057b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React , {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport green from \"@material-ui/core/colors/green\";\r\n\r\nclass BtnCellRenderer extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.btnClickedHandler = this.btnClickedHandler.bind(this);\r\n    }\r\n    btnClickedHandler() {\r\n      this.setState(this.props.value);\r\n    }\r\n\r\n    buttonClick = (e) => {\r\n        this.setState({\r\n            visible:true\r\n        })\r\n        let deletedRow = this.props.node.data;\r\n        e.gridApi.updateRowData({ remove: [deletedRow] })\r\n     };\r\n\r\n    render() {\r\n      return (\r\n        <DeleteOutlinedIcon style={{color:\"red\"}} onClick = {() => this.buttonClick(this.props.node)} ></DeleteOutlinedIcon>\r\n      )\r\n    }\r\n}\r\n\r\nexport default BtnCellRenderer;","import React, {useState} from 'react';\r\n\r\nfunction DropDown(props) {\r\n    const[color, setColor] = useState(props.value);\r\n\r\n    const onColorChange = (event) => {\r\n        props.onColorChange(event.target.value);\r\n        setColor(event.target.value);\r\n    }\r\n    return(\r\n        <div>\r\n            <select value={color} onChange={onColorChange}>\r\n                <option value=\"red\"> red </option>\r\n                <option value=\"black\"> black </option>\r\n                <option value=\"green\"> green </option>\r\n                <option value=\"yellow\"> yellow </option>\r\n                <option value=\"violet\"> violet </option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DropDown;","import React from 'react';\r\n\r\nconst GenderCellRenderer = (props) => {\r\n  return (\r\n    <span>\r\n      {props.value}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default GenderCellRenderer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\r\nimport 'ag-grid-enterprise';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport { useState, useRef } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Tooltip } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\nimport '../App.css';\r\nimport BtnCellRenderer from './BtnCellRenderer';\r\nimport DropDown from './DropDown';\r\nimport { DatePicker, Space } from 'antd';\r\nimport { Menu, Dropdown, message } from 'antd';\r\nimport { DownOutlined, UserOutlined } from '@ant-design/icons';\r\nimport { DateFilter } from 'ag-grid-community';\r\nimport Date from './Date';\r\nimport GenderCellRenderer from './genderCellRenderer.jsx';\r\nimport moment from 'moment';\r\nimport { param } from 'jquery';\r\n\r\n\r\n\r\nconst TabelColumn = () => {\r\n\r\n   const [setRowData] = useState([]);\r\n   const gridRef = useRef(null);\r\n   const [gridApi, setGridApi] = useState([]);\r\n   const [gridColumnApi, setGridColumnApi] = useState(null);\r\n\r\n   const [GridApi , setGridApiOne] = useState([]);\r\n   const [gridColumnApiOne , setGridColumnApiOne] = useState(null);\r\n\r\n   \r\n   const rowData = [\r\n    {id:1, name: \"test1\", email: \"test1@gmail.com\", gender:'Male',dob:'22/07/2019',country:'India' , city:'Varansai'},\r\n    {id:2, name: \"test2\", email: \"test2@gmail.com\", gender:'Male',dob:'22/07/2019',country:'India' , city:'Kanpur'},\r\n    {id:3, name: \"test2\", email: \"test3@gmail.com\", gender:'Male',dob:'22/07/2019',country:'India' , city:'Lucknow'}\r\n   ];\r\n\r\n   var newrowData = [];\r\n\r\n    var newData = {\r\n        id : 'id',\r\n        name : 'name',\r\n        email : 'email',\r\n        gender : 'gender',\r\n        dob : 'date',\r\n        country : 'country',\r\n        city : 'city'\r\n    };\r\n\r\n    const onGridReady = (params) => {\r\n        setGridApi(params.api);\r\n        setGridColumnApi(params.columnApi);\r\n    };\r\n\r\n    const onGridReadyOne = (param) => {\r\n        setGridApiOne(param.api);\r\n        setGridColumnApiOne(param.columnApi);\r\n    }\r\n\r\n    const getRowData = () => {\r\n        var rowData = [];\r\n        gridApi.forEachNode(function (node) {\r\n        rowData.push(node.data);\r\n        });\r\n        console.log('Row Data:');\r\n        console.log(rowData);\r\n    };\r\n\r\n    const addItems = (addIndex) => {\r\n        var newItems = [createNewRowData()];\r\n        var res = gridApi.applyTransaction({\r\n          add: newItems,\r\n          addIndex: addIndex,\r\n        });\r\n    };\r\n\r\n    const onRemoveSelected = () => {\r\n        var selectedData = gridApi.getSelectedRows();\r\n        var res = gridApi.applyTransaction({ remove: selectedData });\r\n       \r\n    };\r\n    \r\n    const onRemoveUnselected = () =>{\r\n        var selectedData = gridApi.getSelectedRows();\r\n        var rowData = [];\r\n        gridApi.forEachNode(function (node) {\r\n            if(!selectedData.find(x => x == node.data)){\r\n                rowData.push(node.data);    \r\n            } \r\n        });\r\n        var res = gridApi.applyTransaction({ remove: rowData });\r\n    };\r\n\r\n    const onSubmit = () =>{\r\n        var currrowData = [];\r\n        var selectedData = gridApi.getSelectedRows();\r\n        gridApi.forEachNode(function (node) {\r\n            if(!newrowData.find(x => x == node.data) && selectedData.find(x => x == node.data) && newData == node){\r\n                currrowData.push(node.data);\r\n                newrowData.push(node.data);\r\n            }else if(newData == node){\r\n\r\n            } \r\n        });\r\n        var res = GridApi.applyTransaction({ add: currrowData });\r\n        alert('Submitted');\r\n    }\r\n\r\n    \r\n    function Date(){\r\n        const [inputDate , setInputDate] = useState(moment());\r\n        const dateFormat = \"DD/MM/YYYY\"\r\n        const customFormat = value => `${value.format(dateFormat)}`;\r\n        return(\r\n            <DatePicker onChange={(value , e) => setInputDate(moment(e)) } format={customFormat} />\r\n        );\r\n\r\n    }\r\n\r\n\r\n    const updateItems = () => {\r\n        var itemsToUpdate = [];\r\n        var selectedData = gridApi.getSelectedRows();\r\n        console.log(selectedData);\r\n        var data = selectedData.data;\r\n        itemsToUpdate.push(data);\r\n        var res = gridApi.applyTransaction({ update: itemsToUpdate });\r\n    };\r\n\r\n    const onCellValueChanged = (params) => {\r\n        var colId = params.column.getId();\r\n        if (colId === 'country') {\r\n          var selectedCountry = params.data.country;\r\n          var selectedCity = params.data.city;\r\n          var allowedCities = countyToCityMap(selectedCountry);\r\n          var cityMismatch = allowedCities.indexOf(selectedCity) < 0;\r\n          if (cityMismatch) {\r\n             params.node.setDataValue('city', null);\r\n          }\r\n        }\r\n    };\r\n\r\n    function onDeleteSelected(params){\r\n        var selectedRow = params.data;\r\n        gridApi.forEachNode(function (node){\r\n            if(selectedRow.find(x => x == node.data)){\r\n                gridApi.applyTransaction({delete : selectedRow});\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n   return ([\r\n        <div style = {{textAlign: 'center',marginTop:10}}>\r\n                <Button className = \"btn btn-outline-primary\" style = {{marginLeft:5 , marginRight:5}} onClick={() => addItems()}>Add Items</Button>\r\n                <Button className = \"btn btn-outline-primary\" style = {{marginLeft:5 , marginRight:5}} onClick={() => onRemoveSelected()}>Remove Selected</Button>\r\n                <Button className = \"btn btn-outline-primary\" style = {{marginLeft:5 , marginRight:5}} onClick={() => onRemoveUnselected()}>Remove UnSelected</Button>\r\n                <Button type=\"submit\" className = \"btn btn-outline-primary\" style = {{marginLeft:5 , marginRight:5}} onClick={()=> onSubmit()}>Submit</Button>   \r\n                \r\n        </div>,\r\n       <div id=\"myGrid\" className=\"ag-theme-alpine\"  style={{height: 280, width: 1200 , marginLeft:140 , marginTop:10 }}>\r\n           <AgGridReact\r\n                defaultColDef={{\r\n                    flex: 1,\r\n                    minWidth: 120,\r\n                    editable: true,\r\n                }}\r\n              frameworkComponents = {{\r\n                btnCellRenderer: BtnCellRenderer,\r\n                tableDatePicker : Date,\r\n                genderCellRenderer: GenderCellRenderer\r\n              }}\r\n               singleClickEdit={true}\r\n               ref = {gridRef}\r\n               rowData={rowData}\r\n               rowSelection=\"multiple\"\r\n               animateRows={true}\r\n               onGridReady={onGridReady}>\r\n               <AgGridColumn field=\"id\" pinned=\"left\" resizable={true} checkboxSelection ={true} sortable={true} filter={true} style={{width: 25}}></AgGridColumn>\r\n               <AgGridColumn field=\"name\" pinned=\"left\" sortable={true} resizable={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n               <AgGridColumn field=\"email\" sortable={true} filter={true} resizable={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n               <AgGridColumn field=\"gender\" sortable={true} cellRenderer=\"genderCellRenderer\" cellEditor=\"agSelectCellEditor\" cellEditorParams={{ values: ['Male', 'Female'] , cellHeight: 50 , cellRenderer: 'genderCellRenderer',}}/>\r\n               <AgGridColumn field=\"dob\" onCellValueChanged={onCellValueChanged} sortable={true} editable={true}  filter={true} resizable={true} filter=\"agTextColumnFilter\" cellEditor=\"tableDatePicker\"  ></AgGridColumn>\r\n               <AgGridColumn field=\"country\" onCellValueChanged={onCellValueChanged} sortable={true} filter={true} resizable={true} filter=\"agTextColumnFilter\" cellEditor=\"agSelectCellEditor\" cellEditorParams={{ cellHeight: 50, values: ['Ireland', 'USA','India'] }}></AgGridColumn>\r\n               <AgGridColumn field=\"city\" onCellValueChanged={onCellValueChanged} cellEditor=\"agSelectCellEditor\" cellEditorParams={cellCellEditorParams} sortable={true} filter={true} resizable={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n               <AgGridColumn onClick = {onDeleteSelected} editable={false} cellRenderer = \"btnCellRenderer\"></AgGridColumn>\r\n           </AgGridReact>\r\n       </div>,\r\n       <div style={{marginLeft:140 , marginTop:20}}>\r\n            <h6>Submitted Data</h6>\r\n       </div>,\r\n       <div className=\"ag-theme-alpine\" style={{height: 280, width: 1200 , marginLeft:140 , marginTop:10}}>\r\n        <AgGridReact\r\n            defaultColDef={{\r\n                flex: 1,\r\n                minWidth: 120,\r\n                editable: false,\r\n            }}\r\n            rowData={newrowData}\r\n            rowSelection=\"multiple\"\r\n            onGridReady = {onGridReadyOne}\r\n            animateRows={true}>\r\n            <AgGridColumn field=\"id\" sortable={true} editable = {false} filter={true}></AgGridColumn>\r\n            <AgGridColumn field=\"name\" sortable={true} editable = {false} resizable={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n            <AgGridColumn field=\"email\" sortable={true} editable = {false} filter={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n            <AgGridColumn field=\"gender\" sortable={true} editable = {false} filter={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n            <AgGridColumn field=\"dob\" sortable={true} editable = {false} filter={true} filter=\"agTextColumnFilter\" ></AgGridColumn>\r\n            <AgGridColumn field=\"country\" sortable={true} editable = {false} filter={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n            <AgGridColumn field=\"city\" sortable={true} editable = {false} filter={true} filter=\"agTextColumnFilter\"></AgGridColumn>\r\n        </AgGridReact>\r\n    </div>\r\n    ]\r\n       \r\n   );\r\n\r\n   var newCount = 1;\r\n   function createNewRowData() {\r\n\r\n        var newData = {\r\n            id : '',\r\n            name : '',\r\n            email : '',\r\n            gender : '',\r\n            dob : '',\r\n            country : '',\r\n            city : ''\r\n        };\r\n        newCount++;\r\n        return newData;\r\n    }\r\n\r\n    function cellCellEditorParams(params) {\r\n        var selectedCountry = params.data.country;\r\n        var allowedCities = countyToCityMap(selectedCountry);\r\n        return {\r\n          values: allowedCities,\r\n          formatValue: function (value) {\r\n            return value + ' (' + selectedCountry + ')';\r\n          },\r\n        };\r\n      }\r\n      function countyToCityMap(match) {\r\n        var map = {\r\n          Ireland: ['Dublin', 'Cork', 'Galway'],\r\n          USA: ['New York', 'Los Angeles', 'Chicago', 'Houston'],\r\n          India : ['Varanasi','Bhopal','Mumbai']\r\n        };\r\n        return map[match];\r\n      }\r\n};\r\n\r\nexport default TabelColumn;","import logo from './logo.svg';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\nimport { useState, useRef } from 'react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport './App.css';\n\nimport TableColumn from './Components/TableColumn';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <TableColumn />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}